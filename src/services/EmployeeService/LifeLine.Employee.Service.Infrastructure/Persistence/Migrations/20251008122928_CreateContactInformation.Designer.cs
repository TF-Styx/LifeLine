// <auto-generated />
using System;
using LifeLine.Employee.Service.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LifeLine.Employee.Service.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(EmployeeWriteContext))]
    [Migration("20251008122928_CreateContactInformation")]
    partial class CreateContactInformation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.ContactInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CorporateEmail")
                        .HasColumnType("text")
                        .HasColumnName("CorporateEmail");

                    b.Property<string>("CorporatePhone")
                        .HasColumnType("text")
                        .HasColumnName("CorporatePhone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PersonalEmail");

                    b.Property<string>("PersonalPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PersonalPhone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("ContactInformations", (string)null);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("Avatar");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateEntry");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("GenderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Patronymic")
                        .UseCollation("case_insensitive");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("Rating");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Surname")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.ContactInformation", b =>
                {
                    b.HasOne("LifeLine.Employee.Service.Domain.Models.Employee", "Employee")
                        .WithOne("ContactInformation")
                        .HasForeignKey("LifeLine.Employee.Service.Domain.Models.ContactInformation", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Shared.Domain.ValueObjects.Address", "HomeAddress", b1 =>
                        {
                            b1.Property<Guid>("ContactInformationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Apartment")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Apartment");

                            b1.Property<string>("Building")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Building");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("City");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("character varying(6)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Region");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.HasKey("ContactInformationId");

                            b1.ToTable("ContactInformations");

                            b1.WithOwner()
                                .HasForeignKey("ContactInformationId");
                        });

                    b.Navigation("Employee");

                    b.Navigation("HomeAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Employee", b =>
                {
                    b.HasOne("LifeLine.Employee.Service.Domain.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Employee", b =>
                {
                    b.Navigation("ContactInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
