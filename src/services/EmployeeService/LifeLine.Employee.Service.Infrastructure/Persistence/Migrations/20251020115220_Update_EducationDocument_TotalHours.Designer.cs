// <auto-generated />
using System;
using LifeLine.Employee.Service.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LifeLine.Employee.Service.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(EmployeeWriteContext))]
    [Migration("20251020115220_Update_EducationDocument_TotalHours")]
    partial class Update_EducationDocument_TotalHours
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("ContractId");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("DepartmentId");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("EmployeeId");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("HireDate");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ManagerId");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("PositionId");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("StatusId");

                    b.Property<DateTime>("TerminationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TerminationDate");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Assignments", (string)null);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.ContactInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CorporateEmail")
                        .HasColumnType("text")
                        .HasColumnName("CorporateEmail");

                    b.Property<string>("CorporatePhone")
                        .HasColumnType("text")
                        .HasColumnName("CorporatePhone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PersonalEmail");

                    b.Property<string>("PersonalPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PersonalPhone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("ContactInformations", (string)null);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ContractNumber")
                        .UseCollation("case_insensitive");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("EmployeeId");

                    b.Property<Guid>("EmployeeTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("EmployeeTypeId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<string>("FileKey")
                        .HasColumnType("text")
                        .HasColumnName("FileKey");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric")
                        .HasColumnName("Salary");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ContractNumber")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Contracts", (string)null);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.EducationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DocumentNumber")
                        .UseCollation("case_insensitive");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("DocumentTypeId");

                    b.Property<Guid>("EducationLevelId")
                        .HasColumnType("uuid")
                        .HasColumnName("EducationLevelId");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("EmployeeId");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("IssuedDate");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("OrganizationName")
                        .UseCollation("case_insensitive");

                    b.Property<string>("ProgramName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("ProgramName")
                        .UseCollation("case_insensitive");

                    b.Property<string>("QualificationAwardedName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("QualificationAwardedName")
                        .UseCollation("case_insensitive");

                    b.Property<string>("SpecialtyName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("SpecialtyName")
                        .UseCollation("case_insensitive");

                    b.Property<double?>("TotalHours")
                        .HasColumnType("numeric")
                        .HasColumnName("TotalHours");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EducationDocuments", (string)null);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("Avatar");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateEntry");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("GenderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Patronymic")
                        .UseCollation("case_insensitive");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("Rating");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Surname")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.EmployeeType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("Description")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EmployeeTypes", (string)null);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.WorkPermit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AdmissionStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("AdmissionStatusId");

                    b.Property<string>("DocumentSeries")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DocumentSeries")
                        .UseCollation("case_insensitive");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("EmployeeId");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("FileKey")
                        .HasColumnType("text")
                        .HasColumnName("FileKey");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("IssueDate");

                    b.Property<string>("IssuingAuthority")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("IssuingAuthority")
                        .UseCollation("case_insensitive");

                    b.Property<Guid>("PermitTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("PermitTypeId");

                    b.Property<string>("ProtocolNumber")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("ProtocolNumber")
                        .UseCollation("case_insensitive");

                    b.Property<string>("SpecialtyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("SpecialtyName")
                        .UseCollation("case_insensitive");

                    b.Property<string>("WorkPermitName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("WorkPermitName")
                        .UseCollation("case_insensitive");

                    b.Property<string>("WorkPermitNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("WorkPermitNumber")
                        .UseCollation("case_insensitive");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkPermits", (string)null);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Assignment", b =>
                {
                    b.HasOne("LifeLine.Employee.Service.Domain.Models.Contract", null)
                        .WithOne()
                        .HasForeignKey("LifeLine.Employee.Service.Domain.Models.Assignment", "ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LifeLine.Employee.Service.Domain.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LifeLine.Employee.Service.Domain.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.ContactInformation", b =>
                {
                    b.HasOne("LifeLine.Employee.Service.Domain.Models.Employee", "Employee")
                        .WithOne("ContactInformation")
                        .HasForeignKey("LifeLine.Employee.Service.Domain.Models.ContactInformation", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Shared.Domain.ValueObjects.Address", "HomeAddress", b1 =>
                        {
                            b1.Property<Guid>("ContactInformationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Apartment")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Apartment");

                            b1.Property<string>("Building")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Building");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("City");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("character varying(6)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Region");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Street");

                            b1.HasKey("ContactInformationId");

                            b1.ToTable("ContactInformations");

                            b1.WithOwner()
                                .HasForeignKey("ContactInformationId");
                        });

                    b.Navigation("Employee");

                    b.Navigation("HomeAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Contract", b =>
                {
                    b.HasOne("LifeLine.Employee.Service.Domain.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LifeLine.Employee.Service.Domain.Models.EmployeeType", null)
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.EducationDocument", b =>
                {
                    b.HasOne("LifeLine.Employee.Service.Domain.Models.Employee", "Employee")
                        .WithMany("EducationDocuments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Employee", b =>
                {
                    b.HasOne("LifeLine.Employee.Service.Domain.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.WorkPermit", b =>
                {
                    b.HasOne("LifeLine.Employee.Service.Domain.Models.Employee", "Employee")
                        .WithMany("WorkPermits")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LifeLine.Employee.Service.Domain.Models.Employee", b =>
                {
                    b.Navigation("ContactInformation");

                    b.Navigation("EducationDocuments");

                    b.Navigation("WorkPermits");
                });
#pragma warning restore 612, 618
        }
    }
}
